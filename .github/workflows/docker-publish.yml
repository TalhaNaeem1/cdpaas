name: Deploy to ECR

on:
 
  push:
    branches: [ main ]

jobs:
  build:
    name: building
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          authService:
            - 'authService/**/*'
          ambassadorPlugin:
            - 'ambassadorPlugin/**/*'
    - uses: actions/upload-artifact@master
      with: 
        name: things
        path: ./        
    
  ambassador:
    name: Push Docker Image  to ECR
    runs-on: ubuntu-latest
    needs: build
    if:  needs.build.outputs.ambassadorPlugin == 'true' 
    
    steps:
 
   
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
    - name: Authservice CI
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cdpaas
        IMAGE_TAG: justtocheck
      run: |
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         
    - name: ambassadorPlugin CI
      
      working-directory: ambassadorPlugin/
      if: steps.filter.outputs.ambassadorPlugin == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cdpaas
        IMAGE_TAG: justtocheck
      run: |
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

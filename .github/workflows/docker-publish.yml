name: Deploy to ECR

on:
 
  push:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      authService: ${{ steps.filter.outputs.authService }}
      ambassadorPlugin: ${{ steps.filter.outputs.ambassadorPlugin }}
      pipelineService: ${{ steps.filter.outputs.pipelineService }}
      CadenceWorkerService: ${{ steps.filter.outputs.CadenceWorkerService }}
      frontend: ${{ steps.filter.outputs.frontend }}
      productMigrate: ${{ steps.filter.outputs.productMigrate }}
      
    steps:
    - name: Check out code
      uses: actions/checkout@v2
   
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          authService:
            - 'authService/**/*'
          ambassadorPlugin:
            - 'ambassadorPlugin/**/*'
          pipelineService:
            - 'pipelineService/**/*'
          CadenceWorkerService:
            - 'CadenceWorkerService/**/*'
          frontend:
            - 'frontend/**/*'
          productMigrate:
            - 'migrations/productServicePostgresMigrate/**/*'


#
# For Pipeline Integration test
  pipeline-integration-test:
    environment: test
    needs: changes
    if: ${{ needs.changes.outputs.pipelineService== 'true' }}
    name: PipelineService Integration Test
    runs-on: ubuntu-latest
 
    steps:
    - name: Check out code
      uses: actions/checkout@v2
         
    - name: Building and Running Integration Test
     # working-directory: pipelineService/
      run: |
         npm i build-base
         cd pipelineService
         go test ./...


  # For ambassadorPlugin
  ambassador-build:
    environment: build
    name: Update ambassadorPlugin CI
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.ambassadorPlugin== 'true' }}
     
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
         
    - name: ambassadorPlugin CI
      
      working-directory: ambassadorPlugin/
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
         make DOCKER_IMAGE=$ECR_REGISTRY/cdpaas/ambassador-edge-stack:${GITHUB_SHA::8}   
         docker push $ECR_REGISTRY/cdpaas/ambassador-edge-stack:${GITHUB_SHA::8}


# For authService
  authService:
    environment: build
    needs: changes
    if: ${{ needs.changes.outputs.authService== 'true' }}
    name: Update authService CI
    runs-on: ubuntu-latest
 
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
         
    - name: authService CI
      
      #working-directory: authService/
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
         docker build -t  $ECR_REGISTRY/cdpaas/auth-service-$GITHUB_REF_NAME:${GITHUB_SHA::8} -t $ECR_REGISTRY/cdpaas/auth-service-$GITHUB_REF_NAME:latest -f authService/Dockerfile authService
         docker push $ECR_REGISTRY/cdpaas/auth-service-$GITHUB_REF_NAME:${GITHUB_SHA::8} 
         docker push $ECR_REGISTRY/cdpaas/auth-service-$GITHUB_REF_NAME:latest

# For Pipeline build
  pipeline-build:
    environment: build
    needs: changes
    if: ${{ needs.changes.outputs.pipelineService== 'true' }}
    name: Update pipelineService CI
    runs-on: ubuntu-latest
 
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
         
    - name: Push to ECR Registry
     # working-directory: pipelineService/
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
         docker build -t $ECR_REGISTRY/cdpaas/pipeline-service-$GITHUB_REF_NAME:${GITHUB_SHA::8} -t $ECR_REGISTRY/cdpaas/pipeline-service-$GITHUB_REF_NAME:latest -f pipelineService/Dockerfile pipelineService
         docker push $ECR_REGISTRY/cdpaas/pipeline-service-$GITHUB_REF_NAME:${GITHUB_SHA::8}
         docker push $ECR_REGISTRY/cdpaas/pipeline-service-$GITHUB_REF_NAME:latest

# For cadence-worker-Service
  cadence-worker-build:
    environment: build
    needs: changes
    if: ${{ needs.changes.outputs.CadenceWorkerService== 'true' }}
    name: Update CadenceWorkerService CI
    runs-on: ubuntu-latest
 
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
         
    - name: Push to ECR Registry
      
#      working-directory: CadenceWorkerService/
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
         docker build --build-arg ENVIRONMENT=$CI_COMMIT_BRANCH -t $ECR_REGISTRY/cdpaas/cadence-worker-service-$GITHUB_REF_NAME:${GITHUB_SHA::8} -t $ECR_REGISTRY/cdpaas/cadence-worker-service-$GITHUB_REF_NAME:latest -f CadenceWorkerService/Dockerfile CadenceWorkerService
         docker push $ECR_REGISTRY/cdpaas/cadence-worker-service-$GITHUB_REF_NAME:${GITHUB_SHA::8}
         docker push $ECR_REGISTRY/cdpaas/cadence-worker-service-$GITHUB_REF_NAME:latest


# For frontend
  frontend:
    environment: build
    needs: changes
    if: ${{ needs.changes.outputs.frontend== 'true' }}
    name: Update CadenceWorkerService CI
    runs-on: ubuntu-latest
 
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
         
    - name: Push to ECR Registry

      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
         docker build -t $ECR_REGISTRY/cdpaas/cdpaas-frontend-$GITHUB_REF_NAME:${GITHUB_SHA::8} -t $ECR_REGISTRY/cdpaas/cdpaas-frontend-$GITHUB_REF_NAME:latest -f frontend/Dockerfile frontend
         docker push $ECR_REGISTRY/cdpaas/cdpaas-frontend-$GITHUB_REF_NAME:${GITHUB_SHA::8}
         docker push $ECR_REGISTRY/cdpaas/cdpaas-frontend-$GITHUB_REF_NAME:latest


# For product-migrate
  product-migrate:
    environment: migrate
    needs: changes
    if: ${{ needs.changes.outputs.productMigrate== 'true' }}
    name: Update productServicePostgresMigrate CI
    runs-on: ubuntu-latest
 
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
         
    - name: Push to ECR Registry
      working-directory: migrations/productServicePostgresMigrate/
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
         docker build -t $ECR_REGISTRY/cdpaas/product-service-postgres-migrate-$GITHUB_REF_NAME:${GITHUB_SHA::8} -t $ECR_REGISTRY/cdpaas/product-service-postgres-migrate-$GITHUB_REF_NAME:latest -f migrations/productServicePostgresMigrate/Dockerfile migrations/productServicePostgresMigrate
         docker push $ECR_REGISTRY/cdpaas/product-service-postgres-migrate-$GITHUB_REF_NAME:${GITHUB_SHA::8}
         docker push $ECR_REGISTRY/cdpaas/product-service-postgres-migrate-$GITHUB_REF_NAME:latest
